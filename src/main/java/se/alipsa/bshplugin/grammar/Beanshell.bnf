{
  parserClass="se.alipsa.bshplugin.parser.BeanshellParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Beanshell"
  psiImplClassSuffix="Impl"
  psiPackage="se.alipsa.bshplugin.psi"
  psiImplPackage="se.alipsa.bshplugin.psi.impl"

  elementTypeHolderClass="se.alipsa.bshplugin.psi.BeanshellTypes"
  elementTypeClass="se.alipsa.bshplugin.psi.BeanshellElementType"
  tokenTypeClass="se.alipsa.bshplugin.psi.BeanshellTokenType"

  psiImplUtilClass="se.alipsa.bshplugin.psi.impl.BeanshellPsiImplUtil"

    tokens = [
  // reserved words
    ASSERT="assert"
    BREAK="break"
    CASE="case"
    CATCH="catch"
    CLASS="class"
    CONST="const"
    CONTINUE="continue"
    DEFAULT="default"
    DO="do"
    ELSE="else"
    ENUM="enum"
    FALSE="false"
    FINAL="final"
    FINALLY="finally"
    FOR="for"
    IF="if"
    IN="in"
    NEW="new"
    NULL="null"
    RETURN="return"
    SUPER="super"
    SWITCH="switch"
    SYNCHRONIZED="synchronized"
    THIS="this"
    THROW="throw"
    TRANSIENT="transient"
    TRUE="true"
    TRY="try"
    VAR="var"
    VOID="void"
    WHILE="while"

  // BUILT_IN_IDENTIFIER
    ABSTRACT="abstract"
    EXPORT="export"
    EXTENDS="extends"
    IMPLEMENTS="implements"
    IMPORT="import"
    PACKAGE="package"
    STATIC="static"
    PRIVATE="private"
    PUBLIC="public"

    LBRACE="{"
    RBRACE="}"
    LBRACKET="["
    RBRACKET="]"
    LPAREN="("
    RPAREN=")"
    SEMICOLON=";"
    MINUS="-"
    MINUS_EQ="-="
    MINUS_MINUS="--"
    PLUS="+"
    PLUS_PLUS="++"
    PLUS_EQ="+="
    DIV="/"
    DIV_EQ="/="
    MUL="*"
    MUL_EQ="*="
    INT_DIV="~/"
    INT_DIV_EQ="~/="
    REM_EQ="%="
    REM="%"
    BIN_NOT="~"
    NOT="!"

    EQ="="
    EQ_EQ="=="
    NEQ="!="
    DOT="."
    DOT_DOT_DOT="..."
    COMMA=","
    COLON=":"
    GT=">"
    GT_EQ=">="
    GT_GT=">>"
    GT_GT_EQ=">>="
    LT="<"
    LT_EQ="<="
    LT_LT="<<"
    LT_LT_EQ="<<="
    OR="|"
    OR_EQ="|="
    OR_OR="||"
    OR_OR_EQ="||="
    QUEST="?"
    XOR="^"
    XOR_EQ="^="
    AND="&"
    AND_EQ="&="
    AND_AND="&&"
    AND_AND_EQ="&&="
    HASH="#"
    AT="@"
    ]

    extends(".*Expression")="expression"
}

beanshellFile ::= item_*

private item_ ::= (property|COMMENT|CRLF)

property ::= (KEY? SEPARATOR VALUE?) | KEY